name: Update Recent Commit Badge

on:
  schedule:
    - cron: "*/30 * * * *"  # Every 30 mins
  workflow_dispatch:

permissions:
  contents: write

jobs:
  update:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout this repo
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Get most recent commit
        id: commit
        run: |
          echo "Fetching all repositories for EricSpencer00..."
          REPOS=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" "https://api.github.com/users/ericspencer00/repos?per_page=100")
          
          LATEST_COMMIT_DATE="1970-01-01T00:00:00Z"
          LATEST_SHA=""
          LATEST_REPO=""

          echo "Iterating through repositories to find the most recent commit..."
          # Loop through each repository
          echo "$REPOS" | jq -c '.[]' | while read -r repo;
          do
            REPO_NAME=$(echo "$repo" | jq -r '.name')
            echo "Checking repo: $REPO_NAME"

            # Fetch the latest commit for this repo by author EricSpencer00
            # Use committer date for a more reliable 'when' the commit was made
            COMMIT_INFO=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" "https://api.github.com/repos/ericspencer00/$REPO_NAME/commits?author=EricSpencer00&per_page=1")

            # Check if a commit was found
            if echo "$COMMIT_INFO" | jq -e '.[0]' > /dev/null;
            then
              CURRENT_SHA=$(echo "$COMMIT_INFO" | jq -r '.[0].sha')
              # Use committer date for comparison
              CURRENT_COMMIT_DATE=$(echo "$COMMIT_INFO" | jq -r '.[0].commit.committer.date')

              # Compare dates
              if [[ "$CURRENT_COMMIT_DATE" > "$LATEST_COMMIT_DATE" ]];
              then
                LATEST_COMMIT_DATE="$CURRENT_COMMIT_DATE"
                LATEST_SHA="$CURRENT_SHA"
                LATEST_REPO="$REPO_NAME"
                echo "Found newer commit ($CURRENT_COMMIT_DATE) in $REPO_NAME: $CURRENT_SHA"
              fi
            else
              echo "No commits found by EricSpencer00 in $REPO_NAME."
            fi
          done

          # Output the details of the overall latest commit
          if [ -n "$LATEST_SHA" ]; then
            echo "Overall most recent commit: $LATEST_REPO/$LATEST_SHA ($LATEST_COMMIT_DATE)"
            echo "repo=$LATEST_REPO" >> $GITHUB_OUTPUT
            echo "sha=$LATEST_SHA" >> $GITHUB_OUTPUT
          else
            echo "No commits found by EricSpencer00 across all repositories."
            # Handle case where no commits are found - maybe set default values or fail
            echo "repo=none" >> $GITHUB_OUTPUT
            echo "sha=none" >> $GITHUB_OUTPUT
          fi

      - name: Write commit info to JSON
        run: |
          echo '{"schemaVersion":1,"label":"Most Recent Commit","message":"'${{ steps.commit.outputs.sha }}'","color":"blue","link":"https://github.com/EricSpencer00/${{ steps.commit.outputs.repo }}/commit/${{ steps.commit.outputs.sha }}"}' > recent-commit.json

      - name: Check for changes
        id: check
        run: |
          if git diff --quiet recent-commit.json; then
            echo "No changes detected"
            echo "changed=false" >> $GITHUB_OUTPUT
          else
            echo "Changes detected"
            echo "changed=true" >> $GITHUB_OUTPUT
          fi

      - name: Get commit link
        run: |
          echo "https://github.com/EricSpencer00/${{ steps.commit.outputs.repo }}/commit/${{ steps.commit.outputs.sha }}" > recent-commit-link.txt

      - name: Commit & Push
        if: steps.check.outputs.changed == 'true'
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git add recent-commit.json
          git commit -m "ðŸ¤– update: recent commit badge"
          git push
