name: Update Commit Badge

on:
  schedule:
    - cron: '*/30 * * * *'  # Runs every 30 minutes
  workflow_dispatch:  # Allows manual triggering

jobs:
  update-badge:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          token: ${{ secrets.PAT_TOKEN }}
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'
      
      - name: Install PyGithub
        run: pip install PyGithub
      
      - name: Get latest commit across all repos
        id: commit
        env:
          GITHUB_TOKEN: ${{ secrets.PAT_TOKEN }}
        run: |
          python - <<EOF
          from github import Github
          import json
          from datetime import datetime, timezone
          
          # Initialize GitHub client
          g = Github("${{ env.GITHUB_TOKEN }}")
          user = g.get_user("EricSpencer00")
          
          latest_commit = None
          latest_date = datetime.min.replace(tzinfo=timezone.utc)
          
          # Check all repositories
          for repo in user.get_repos():
              try:
                  commits = repo.get_commits()
                  if commits.totalCount > 0:
                      commit = commits[0]
                      if commit.commit.author.date > latest_date:
                          latest_date = commit.commit.author.date
                          latest_commit = {
                              "repo": repo.name,
                              "hash": commit.sha,
                              "message": commit.commit.message.split('\n')[0],  # First line of commit message
                              "url": commit.html_url
                          }
              except Exception as e:
                  print(f"Error processing {repo.name}: {str(e)}")
                  continue
          
          # Write to output
          if latest_commit:
              print(f"::set-output name=repo::{latest_commit['repo']}")
              print(f"::set-output name=hash::{latest_commit['hash']}")
              print(f"::set-output name=message::{latest_commit['message']}")
              print(f"::set-output name=url::{latest_commit['url']}")
          EOF
      
      - name: Update badge
        run: |
          cat > recent-commit.json << EOF
          {
            "schemaVersion": 1,
            "label": "Most Recent Commit",
            "message": "${{ steps.commit.outputs.repo }} / ${{ steps.commit.outputs.hash }}",
            "color": "blue",
            "link": "${{ steps.commit.outputs.url }}",
            "namedLogo": "github",
            "logoSvg": "<svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24'><path fill='white' d='M12 0c-6.626 0-12 5.373-12 12 0 5.302 3.438 9.8 8.207 11.387.599.111.793-.261.793-.577v-2.234c-3.338.726-4.033-1.416-4.033-1.416-.546-1.387-1.333-1.756-1.333-1.756-1.089-.745.083-.729.083-.729 1.205.084 1.839 1.237 1.839 1.237 1.07 1.834 2.807 1.304 3.492.997.107-.775.418-1.305.762-1.604-2.665-.305-5.467-1.334-5.467-5.931 0-1.311.469-2.381 1.236-3.221-.124-.303-.535-1.524.117-3.176 0 0 1.008-.322 3.301 1.23.957-.266 1.983-.399 3.003-.404 1.02.005 2.047.138 3.006.404 2.291-1.552 3.297-1.23 3.297-1.23.653 1.653.242 2.874.118 3.176.77.84 1.235 1.911 1.235 3.221 0 4.609-2.807 5.624-5.479 5.921.43.372.823 1.102.823 2.222v3.293c0 .319.192.694.801.576 4.765-1.589 8.199-6.086 8.199-11.386 0-6.627-5.373-12-12-12z'/></svg>"
          }
          EOF
      
      - name: Commit and push if changed
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add recent-commit.json
          git diff --quiet && git diff --staged --quiet || (git commit -m "Update commit badge" && git push) 