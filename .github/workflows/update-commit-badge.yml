name: Update Commit Badge

on:
  schedule:
    - cron: '0 */4 * * *'  # Runs every 4 hours
  workflow_dispatch:  # Allows manual triggering

jobs:
  update-badge:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          token: ${{ secrets.PAT_TOKEN }}
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'
      
      - name: Install PyGithub
        run: pip install PyGithub
      
      - name: Get latest commit across all repos
        id: commit
        env:
          GITHUB_TOKEN: ${{ secrets.PAT_TOKEN }}
        run: |
          python - <<EOF
          from github import Github
          import json
          from datetime import datetime, timezone
          import os
          import re
          
          def clean_message(msg):
              # Remove newlines and extra spaces
              msg = re.sub(r'\s+', ' ', msg)
              # Remove special characters that might break the badge
              msg = re.sub(r'[^\w\s\-.,:;!?()]', '', msg)
              # Truncate to reasonable length
              return msg[:50] + ('...' if len(msg) > 50 else '')
          
          # Initialize GitHub client
          g = Github("${{ env.GITHUB_TOKEN }}")
          user = g.get_user("EricSpencer00")
          
          latest_commit = None
          latest_date = datetime.min.replace(tzinfo=timezone.utc)
          
          # Check all repositories
          for repo in user.get_repos():
              try:
                  # Get commits for this repository
                  commits = repo.get_commits()
                  if commits.totalCount > 0:
                      # Get the most recent commit
                      commit = commits[0]
                      
                      # Only track commits authored by EricSpencer00
                      if not commit.author or commit.author.login != "EricSpencer00":
                          print(f"Skipping non-author commit in {repo.name}")
                          continue
                          
                      commit_date = commit.commit.author.date
                      
                      # Update if this is the most recent commit we've seen
                      if commit_date > latest_date:
                          latest_date = commit_date
                          latest_commit = {
                              "repo": repo.name,
                              "hash": commit.sha[:7],  # Short hash
                              "message": clean_message(commit.commit.message),
                              "url": commit.html_url,
                              "date": commit_date.isoformat()
                          }
                          print(f"Found newer commit in {repo.name}: {commit.sha[:7]}")
              except Exception as e:
                  print(f"Error processing {repo.name}: {str(e)}")
                  continue
          
          # Write to environment file
          if latest_commit:
              print(f"Latest commit found in {latest_commit['repo']}: {latest_commit['hash']}")
              with open(os.environ['GITHUB_OUTPUT'], 'a') as f:
                  f.write(f"repo={latest_commit['repo']}\n")
                  f.write(f"hash={latest_commit['hash']}\n")
                  f.write(f"message={latest_commit['message']}\n")
                  f.write(f"url={latest_commit['url']}\n")
                  f.write(f"date={latest_commit['date']}\n")
          else:
              print("No commits found in any repository")
          EOF
      
      - name: Update badge files
        run: |
          # Update the JSON file with a timestamp to bust cache
          TIMESTAMP=$(date +%s)
          cat > recent-commit.json << EOF
          {
            "schemaVersion": 1,
            "label": "Latest Commit",
            "message": "${{ steps.commit.outputs.repo }} | ${{ steps.commit.outputs.message }}",
            "color": "0A66C2",
            "namedLogo": "github",
            "logoColor": "white",
            "cacheSeconds": 0,
            "timestamp": "$TIMESTAMP"
          }
          EOF
          
          # Create a URL file that redirects to the commit
          echo "${{ steps.commit.outputs.url }}" > commit-url.txt
      
      - name: Commit and push if changed
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add recent-commit.json commit-url.txt
          git diff --quiet && git diff --staged --quiet || (git commit -m "Update commit badge" && git push) 