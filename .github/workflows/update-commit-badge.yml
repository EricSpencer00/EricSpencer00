name: Update Commit Badge

on:
  schedule:
    - cron: '*/30 * * * *'  # Runs every 30 minutes
  workflow_dispatch:  # Allows manual triggering

jobs:
  update-badge:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          token: ${{ secrets.PAT_TOKEN }}
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'
      
      - name: Install PyGithub
        run: pip install PyGithub
      
      - name: Get latest commit across all repos
        id: commit
        env:
          GITHUB_TOKEN: ${{ secrets.PAT_TOKEN }}
        run: |
          python - <<EOF
          from github import Github
          import json
          from datetime import datetime, timezone
          import os
          
          # Initialize GitHub client
          g = Github("${{ env.GITHUB_TOKEN }}")
          user = g.get_user("EricSpencer00")
          
          latest_commit = None
          latest_date = datetime.min.replace(tzinfo=timezone.utc)
          
          # Check all repositories
          for repo in user.get_repos():
              try:
                  commits = repo.get_commits()
                  if commits.totalCount > 0:
                      commit = commits[0]
                      if commit.commit.author.date > latest_date:
                          latest_date = commit.commit.author.date
                          latest_commit = {
                              "repo": repo.name,
                              "hash": commit.sha,
                              "message": commit.commit.message.split('\n')[0],  # First line of commit message
                              "url": commit.html_url
                          }
              except Exception as e:
                  print(f"Error processing {repo.name}: {str(e)}")
                  continue
          
          # Write to environment file
          if latest_commit:
              with open(os.environ['GITHUB_OUTPUT'], 'a') as f:
                  f.write(f"repo={latest_commit['repo']}\n")
                  f.write(f"hash={latest_commit['hash']}\n")
                  f.write(f"message={latest_commit['message']}\n")
                  f.write(f"url={latest_commit['url']}\n")
          EOF
      
      - name: Update badge
        run: |
          cat > recent-commit.json << EOF
          {
            "schemaVersion": 1,
            "label": "Latest Commit",
            "message": "${{ steps.commit.outputs.repo }} | ${{ steps.commit.outputs.message }}",
            "color": "0A66C2",
            "link": "${{ steps.commit.outputs.url }}",
            "namedLogo": "github",
            "logoColor": "white"
          }
          EOF
      
      - name: Commit and push if changed
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add recent-commit.json
          git diff --quiet && git diff --staged --quiet || (git commit -m "Update commit badge" && git push) 